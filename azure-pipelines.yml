trigger:
- devsecops-enablement

resources:
  repositories:
  - repository: appsectemplates
    type: git
    name: DevSecOps/DevSecOps

variables:
- group: companyService
- name: dockerRegistryServiceConnection
  value: 'ACR-Dev'

- name: imageRepository
  value: 'dmscompanyservice'

- name: dockerfilePath
  value: '**/Dockerfile'

- name: 'tag'
  value: '$(Build.BuildNumber)'

- name: 'vmImageName'
  value: 'ubuntu-latest'

- name: 'sonarName'
  value: 'DMS-companyService'

- name: 'ACR'
  value: 'microservicesacrafrdev.azurecr.io'

- name: 'checkmarxTeam'
  value: '/CxServer/AB-InBev/AFR/DMS'

jobs:
# - job: SecureScan
#   displayName: SecureScan
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#     - checkout: self
#     - checkout: appsectemplates

    # - template: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates
    #   parameters:
    #     SCServiceConnection: 'SonarcloudServer'
    #     SCProjectKey: $(sonarName) 
    #     SCProjectName: $(sonarName) 
    #     SCBranchName: '$(Build.SourceBranchName)'
    #     SCBaseDirPath: './$(Build.Repository.Name)'

    # - template: pipeline_templates/secure_code_scan.yml@appsectemplates
    #   parameters:
    #     scanSonarCloud: true
    #     sonarCloudGate: false
    #     SCServiceConnection: 'SonarcloudServer'
  
    #     scanSnyk: true
    #     SKFailOnIssues: false
    #     SkServiceConnection: 'SnykServer'
    #     SkOrganization: '6faff7dd-4e52-4ac6-af3c-a5d1eaa27be2'
    #     SkAdditionalArgs: '--all-projects --detection-depth=4'
        
    #     scanGitleaks: true

    #     scanSnykContainer: true
    #     SkDockerImageName: '$(ACR)/$(imageRepository):$(tag)'
    #     SkDockerFilePath: './$(Build.Repository.Name)/Dockerfile'

    #     scanCheckmarx: true
    #     CxServiceConnection: 'CheckmarxServer'
    #     CxPreset: 'ASA_SDLC_Ready'
    #     CxEnableSyncScan: false
    #     CxEnableThreshold: false
    #     CxTeamName: $(checkmarxTeam)


- job: Deploy
  displayName: Deploy
  pool:
    name: 'AFR_Non_Prod_Self_hosted_Pool'
    demands: 
    - agent.os -equals Linux

  steps:
    - checkout: self

    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: --build-arg COMPANY_USER=$(USER) --build-arg COMPANY_HOST=$(HOST) --build-arg COMPANY_DB=$(DB) --build-arg COMPANY_PASSWORD=$(PASSWORD) --build-arg COMPANY_JWT=$(JWT_SECRET)
        tags: |
            $(tag)
      
    - task: Docker@2
      displayName: Push
      inputs:
          command: push
          repository: $(imageRepository)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
  
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'



